//
//  ListViewController.swift
//  ListUsers
//
//  Created by Juan Eduardo Montiel Dominguez on 02/12/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit

final class ListViewController: UIViewController {

    // MARK: - Public properties -

    var presenter: ListPresenterInterface!
    @IBOutlet weak var tableview: UITableView!
    var users: [UserModel] = []
    var lastPage = 0

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        self.title = NSLocalizedString("titleBar", comment: "")
        self.tableview.delegate = self
        self.tableview.dataSource = self
        
        let logOutButton = UIBarButtonItem(image: UIImage(named: "logout_black"), style: .plain, target: self, action: #selector(self.logout(sender:)))

        self.navigationItem.leftBarButtonItem = logOutButton
        self.presenter.fetchUsers(last: lastPage)
    }
    
    @objc func logout(sender: UIBarButtonItem?) {
        let alert = UIAlertController(title: NSLocalizedString("titleAlert", comment: ""), message: NSLocalizedString("msgLogOutAlert", comment: ""), preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: NSLocalizedString("cancelButton", comment: ""), style: .destructive, handler: nil))
        alert.addAction(UIAlertAction(title: NSLocalizedString("acceptButton", comment: ""), style: .default, handler: {
            action in
            self.presenter.presentLogin()
            
        }))
        self.present(alert, animated: true, completion: nil)
        
    }
	
}

// MARK: - Extensions -

extension ListViewController: ListViewInterface {
    func showUsers(users: [UserModel]) {
        if self.users.isEmpty {
            self.users = users
            self.tableview.reloadData()
        }else{
            let indexPaths = (self.users.count ..< self.users.count + users.count)
                .map { IndexPath(row: $0, section: 0) }
            self.users.append(contentsOf: users)
            self.tableview.insertRows(at: indexPaths, with: .bottom)
            self.lastPage += 1
        }
    }
    
    func showLoading() {
        self.showLoader()
    }
    
    func dimissLoading() {
        self.hideLoader()
    }
    
    func failure(message: String) {
        showMessageDialog(title: NSLocalizedString("titleAlertError", comment: ""), message: message)
    }
}

// MARK: - UITableViewDelegate, UITableViewDataSource
extension ListViewController:  UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return users.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "UserTableViewCell") as! UserTableViewCell
        cell.item = self.users[indexPath.row]
        if indexPath.row == users.count - 1 {
            self.presenter.fetchUsers(last: lastPage + 1)
        }
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        self.presenter.presentDetail(data: self.users[indexPath.row])
    }
}
